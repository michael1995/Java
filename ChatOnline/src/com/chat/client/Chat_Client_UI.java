/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.chat.client;

import com.chat.server.Chat_Server;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author michaelborodin
 */
public class Chat_Client_UI extends javax.swing.JFrame {

    /**
     * Creates new form Chat_UI
     */
    private static Chat_Client ChatClient;
    public static String UserName = "Anonymous";
    public static int PORT;
    static ArrayList<String> list = new ArrayList<>();

    /**
     * constructor
     */
    public Chat_Client_UI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_send = new javax.swing.JButton();
        txt_Message = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_bodyMessage = new javax.swing.JTextArea();
        txt_UserName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btn_connect = new javax.swing.JButton();
        btn_discconnect = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        List = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setBounds(new java.awt.Rectangle(500, 150, 0, 0));
        setResizable(false);

        btn_send.setText("Send");
        btn_send.setToolTipText("Send Messages");
        btn_send.setEnabled(false);
        btn_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sendActionPerformed(evt);
            }
        });

        txt_Message.setToolTipText("Message Input Box");
        txt_Message.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_MessageKeyPressed(evt);
            }
        });

        txt_bodyMessage.setColumns(20);
        txt_bodyMessage.setRows(5);
        txt_bodyMessage.setToolTipText("Message Body");
        txt_bodyMessage.setBorder(null);
        txt_bodyMessage.setEnabled(false);
        jScrollPane1.setViewportView(txt_bodyMessage);

        txt_UserName.setToolTipText("User Name Field");
        txt_UserName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_UserNameKeyPressed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("User Name");
        jLabel1.setToolTipText("");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Users Online");

        btn_connect.setText("Connect");
        btn_connect.setToolTipText("Connect To Chat ");
        btn_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_connectActionPerformed(evt);
            }
        });

        btn_discconnect.setText("Disconnect");
        btn_discconnect.setToolTipText("Disconnect from the chat");
        btn_discconnect.setEnabled(false);
        btn_discconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_discconnectActionPerformed(evt);
            }
        });

        List.setBackground(new java.awt.Color(204, 204, 204));
        List.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        List.setLayoutOrientation(JList.VERTICAL);
        List.setVisibleRowCount(-1);
        jScrollPane2.setViewportView(List);

        jMenu3.setText("Servers");

        jMenuItem3.setText("Server 1");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem4.setText("Server 2");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem5.setText("Server 3");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jScrollPane2)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, txt_Message))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(btn_send, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(jLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(txt_UserName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 285, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(btn_discconnect, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btn_connect, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(11, 11, 11)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(txt_UserName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(btn_connect)
                        .add(18, 18, 18)
                        .add(btn_discconnect)
                        .add(34, 34, 34))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 7, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txt_Message, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btn_send, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * btn send
     *
     * @param evt
     */
    private void btn_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sendActionPerformed
        // TODO add your handling code here:
        //call the send method
        send();
    }//GEN-LAST:event_btn_sendActionPerformed

    /**
     * button connect
     *
     * @param evt
     */
    private void btn_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_connectActionPerformed
        // TODO add your handling code here:
        //call the log in method
        Login();

    }//GEN-LAST:event_btn_connectActionPerformed

    /**
     * button disconnect
     *
     * @param evt
     */
    private void btn_discconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_discconnectActionPerformed
        // TODO add your handling code here:
        //call the logout method 
        LogOut();

    }//GEN-LAST:event_btn_discconnectActionPerformed

    /**
     * text event user name
     *
     * @param evt
     */
    private void txt_UserNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_UserNameKeyPressed
        if (txt_UserName.getText().equals("")) {
        } else {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                Login();
            }
        }
    }//GEN-LAST:event_txt_UserNameKeyPressed

    /*
     * text event message key
     */
    private void txt_MessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_MessageKeyPressed
        // TODO add your handling code here:
        //if the key event is equalled to enter
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (txt_Message.getText().equals("")) {
                JOptionPane.showConfirmDialog(null, "Enter Something");
            } else {
                send();
            }
        }
    }//GEN-LAST:event_txt_MessageKeyPressed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        //pass the port variable to the chat server constructor
        PORT = 9007;

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        //pass the port variable to the chat server constructor
        PORT = 49152;

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        //pass the port variable to the chat server constructor
        PORT = 65535;

    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chat_Client_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chat_Client_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chat_Client_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chat_Client_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                //set this form visiblity to true
                //then call the populate combo box method
                new Chat_Client_UI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JList List;
    private static javax.swing.JButton btn_connect;
    private javax.swing.JButton btn_discconnect;
    private static javax.swing.JButton btn_send;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private static javax.swing.JMenu jMenu3;
    private static javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txt_Message;
    private javax.swing.JTextField txt_UserName;
    public static javax.swing.JTextArea txt_bodyMessage;
    // End of variables declaration//GEN-END:variables

    /**
     * connect method connect to the socket using the local host and the port
     * numbers
     */
    public static void Connect() {
        try {

            //connect to the local host port 
            final String HOST = "localhost";
            Socket SOCK = new Socket(HOST, PORT);
            System.out.println("You Have Connected To: " + HOST);
            //pass the variables of SOCK to match the other variables in the chatclient
            ChatClient = new Chat_Client(SOCK);
            //print out the users name and get the the user name
            PrintWriter OUT = new PrintWriter(SOCK.getOutputStream());
            OUT.println(UserName);
            OUT.flush();
            //creat a new thread of the chatclient and then start it
            Thread X = new Thread(ChatClient);
            X.start();
            btn_connect.setEnabled(false);
            btn_send.setEnabled(true);
            jMenuBar1.setVisible(false);

        } catch (IOException X) {
            System.out.println(X);
            JOptionPane.showMessageDialog(null, "Server not Responding!");
            System.exit(0);
        }
    }

    /**
     * login method log into the chat room
     */
    public void Login() {
        //add the current user that was typed into the text box
        if (!txt_UserName.getText().equals("")) {
            UserName = txt_UserName.getText().trim();
            //set the title to the user name
            this.setTitle(UserName + "'s Chat Room");
            //call the connect method
            Connect();
            //set the booleans 
            txt_UserName.setEnabled(false);
            btn_discconnect.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(null, "Please Enter a name");
        }
    }

    /**
     * log out method log out of the chat
     */
    public void LogOut() {
        try {           
            //call the disconnect method
            ChatClient.DISCONNECT();
            //set the boolean 
            txt_UserName.setEnabled(true);
            btn_connect.setEnabled(true);
            btn_send.setEnabled(false);
            jMenuBar1.setVisible(true);

        } catch (IOException Y) {
        }
    }

    /**
     * send method send messages to other users in the same socket
     */
    public void send() {
        //send the meesgae accross to the other users
        if (!txt_Message.getText().equals("")) {
            ChatClient.SEND(txt_Message.getText());
            txt_Message.requestFocus();
            txt_Message.setText("");
        }
    }
}
